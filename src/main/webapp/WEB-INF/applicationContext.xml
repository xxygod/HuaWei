<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--启动注解扫描包 -->
    <!--先在父容器排除controller中排除controller-->
    <context:component-scan base-package="com.gangOfFour.shopping">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--扫描properties配置文件-->
    <context:property-placeholder location="WEB-INF/mybatis-source.properties" />
    <!--1配置数据源-->
   <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
    </bean>
    <!--2配置sql工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="WEB-INF/mybatis-configer.xml"/>
        <property name="mapperLocations">
            <list>
                <value>WEB-INF/mapper/*.xml</value>
            </list>
        </property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>      helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true     </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--3、让spring自动将映射SQL的xml文件创建出接口的对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gangOfFour.shopping.dao"/>
    </bean>
    <!--4配置事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 使用注解事务，需要添加Transactional注解属性 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--5、配置声明式事务的切面-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Exception"/>
            <tx:method name="seave*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Exception"/>
            <tx:method name="select*" propagation="SUPPORTS" isolation="REPEATABLE_READ" />
            <tx:method name="query*" propagation="SUPPORTS" isolation="REPEATABLE_READ" />
            <tx:method name="get*" propagation="SUPPORTS" isolation="REPEATABLE_READ" />
        </tx:attributes>
    </tx:advice>
    <!--6、使用AOP配置声明式事务-->
    <aop:config>
        <aop:pointcut id="service" expression="execution(* com.gangOfFour.shopping.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
    </aop:config>
</beans>